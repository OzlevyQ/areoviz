// src/components/ui/AiAdvisor.tsx

'use client';

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { useDashboard } from '@/contexts/DashboardContext';
import { 
  Brain, 
  AlertCircle, 
  CheckCircle, 
  Wrench, 
  TrendingUp,
  Shield,
  Info,
  Plane,
  BarChart3
} from 'lucide-react';
import { formatNumber, formatDateTime } from '@/lib/utils';

export default function AiAdvisor() {
  const { selectedAnomaly, currentRecord, role } = useDashboard();

  const getRoleIcon = () => {
    switch (role) {
      case 'pilot':
        return <Plane className="h-5 w-5" />;
      case 'technician':
        return <Wrench className="h-5 w-5" />;
      case 'manager':
        return <BarChart3 className="h-5 w-5" />;
      default:
        return <Brain className="h-5 w-5" />;
    }
  };

  const getRoleColor = () => {
    switch (role) {
      case 'pilot':
        return 'text-pilot';
      case 'technician':
        return 'text-technician';
      case 'manager':
        return 'text-manager';
      default:
        return 'text-primary';
    }
  };

  const getSeverityBadgeColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-500 text-white';
      case 'high':
        return 'bg-orange-500 text-white';
      case 'medium':
        return 'bg-yellow-500 text-white';
      case 'low':
        return 'bg-blue-500 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };

  if (!selectedAnomaly) {
    return (
      <Card className="h-full">
        <CardHeader>
          <CardTitle className={`flex items-center gap-2 ${getRoleColor()}`}>
            {getRoleIcon()}
            AI Advisory System
          </CardTitle>
        </CardHeader>
        <CardContent className="h-full flex items-center justify-center">
          <div className="text-center text-muted-foreground">
            <Info className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <p className="text-sm">Select an anomaly to view detailed analysis</p>
            <p className="text-xs mt-2">
              AI-powered recommendations tailored for {role}s
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  const renderPilotView = () => (
    <div className="space-y-4">
      {/* Immediate Actions */}
      <div>
        <h3 className="font-semibold text-sm mb-2 flex items-center gap-2">
          <Shield className="h-4 w-4 text-pilot" />
          Immediate Actions Required
        </h3>
        <div className="bg-pilot/10 border border-pilot/20 rounded-lg p-3 space-y-2">
          {selectedAnomaly.severity === 'critical' && (
            <div className="flex items-start gap-2">
              <AlertCircle className="h-4 w-4 text-red-500 mt-0.5" />
              <div className="text-sm">
                <p className="font-medium">Priority Response</p>
                <p className="text-muted-foreground">
                  Execute emergency procedures for {selectedAnomaly.type}. 
                  Consider altitude adjustment if safe.
                </p>
              </div>
            </div>
          )}
          {selectedAnomaly.recommendedActions?.slice(0, 2).map((action, idx) => (
            <div key={idx} className="flex items-start gap-2">
              <CheckCircle className="h-4 w-4 text-green-500 mt-0.5" />
              <p className="text-sm">{action}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Flight Impact */}
      <div>
        <h3 className="font-semibold text-sm mb-2">Flight Impact Assessment</h3>
        <div className="grid grid-cols-2 gap-2 text-sm">
          <div className="bg-muted rounded p-2">
            <span className="text-muted-foreground">Safety Impact:</span>
            <Badge className={`ml-2 ${getSeverityBadgeColor(selectedAnomaly.severity)}`}>
              {selectedAnomaly.severity.toUpperCase()}
            </Badge>
          </div>
          <div className="bg-muted rounded p-2">
            <span className="text-muted-foreground">Phase:</span>
            <span className="ml-2 font-medium">
              {currentRecord ? currentRecord.FlightPhase_FW56211 : 'Unknown'}
            </span>
          </div>
        </div>
      </div>
    </div>
  );

  const renderTechnicianView = () => (
    <div className="space-y-4">
      {/* Technical Analysis */}
      <div>
        <h3 className="font-semibold text-sm mb-2 flex items-center gap-2">
          <Wrench className="h-4 w-4 text-technician" />
          Technical Diagnosis
        </h3>
        <div className="bg-technician/10 border border-technician/20 rounded-lg p-3">
          <p className="text-sm mb-2">{selectedAnomaly.description}</p>
          <div className="space-y-1">
            <p className="text-xs text-muted-foreground">
              <span className="font-medium">Root Cause Analysis:</span>
            </p>
            <ul className="text-xs space-y-1 ml-4 list-disc">
              <li>Primary sensor deviation detected in {selectedAnomaly.affectedParameters[0]}</li>
              <li>Cross-check with redundant systems shows inconsistency</li>
              <li>Possible causes: sensor drift, calibration error, or hardware fault</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Current Values */}
      {selectedAnomaly.currentValues && (
        <div>
          <h3 className="font-semibold text-sm mb-2">Current Sensor Readings</h3>
          <div className="bg-muted rounded-lg p-3">
            <div className="grid grid-cols-2 gap-2 text-xs">
              {Object.entries(selectedAnomaly.currentValues).map(([key, value]) => (
                <div key={key} className="flex justify-between">
                  <span className="text-muted-foreground">{key}:</span>
                  <span className="font-mono font-medium">{value}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Maintenance Actions */}
      <div>
        <h3 className="font-semibold text-sm mb-2">Maintenance Recommendations</h3>
        <div className="space-y-2">
          {selectedAnomaly.recommendedActions?.map((action, idx) => (
            <div key={idx} className="flex items-start gap-2">
              <div className={`w-6 h-6 rounded-full bg-technician/20 text-technician flex items-center justify-center text-xs font-bold`}>
                {idx + 1}
              </div>
              <p className="text-sm">{action}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderManagerView = () => (
    <div className="space-y-4">
      {/* Executive Summary */}
      <div>
        <h3 className="font-semibold text-sm mb-2 flex items-center gap-2">
          <BarChart3 className="h-4 w-4 text-manager" />
          Executive Summary
        </h3>
        <div className="bg-manager/10 border border-manager/20 rounded-lg p-3">
          <p className="text-sm mb-2">
            {selectedAnomaly.type.replace(/_/g, ' ').toUpperCase()} anomaly detected 
            affecting {selectedAnomaly.affectedSystems.join(', ')}.
          </p>
          <div className="grid grid-cols-2 gap-2 text-xs mt-2">
            <div>
              <span className="text-muted-foreground">Impact Level:</span>
              <Badge className={`ml-2 ${getSeverityBadgeColor(selectedAnomaly.severity)}`}>
                {selectedAnomaly.severity.toUpperCase()}
              </Badge>
            </div>
            <div>
              <span className="text-muted-foreground">Systems Affected:</span>
              <span className="ml-2 font-medium">{selectedAnomaly.affectedSystems.length}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Operational Impact */}
      <div>
        <h3 className="font-semibold text-sm mb-2">Operational Impact</h3>
        <div className="space-y-2 text-sm">
          <div className="flex items-center justify-between">
            <span className="text-muted-foreground">Schedule Impact:</span>
            <Badge variant={selectedAnomaly.severity === 'critical' ? 'destructive' : 'secondary'}>
              {selectedAnomaly.severity === 'critical' ? 'Possible Delay' : 'None Expected'}
            </Badge>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-muted-foreground">Maintenance Required:</span>
            <span className="font-medium">
              {selectedAnomaly.severity === 'critical' || selectedAnomaly.severity === 'high' 
                ? 'Immediate' 
                : 'Next Scheduled Stop'}
            </span>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-muted-foreground">Est. Cost Impact:</span>
            <span className="font-medium">
              {selectedAnomaly.severity === 'critical' ? '$15,000-25,000' 
                : selectedAnomaly.severity === 'high' ? '$5,000-15,000'
                : '$500-2,000'}
            </span>
          </div>
        </div>
      </div>

      {/* Strategic Recommendations */}
      <div>
        <h3 className="font-semibold text-sm mb-2">Strategic Recommendations</h3>
        <div className="bg-muted rounded-lg p-3 space-y-2">
          <div className="flex items-start gap-2">
            <TrendingUp className="h-4 w-4 text-manager mt-0.5" />
            <div className="text-sm">
              <p className="font-medium">Long-term Action</p>
              <p className="text-xs text-muted-foreground">
                Consider upgrading {selectedAnomaly.affectedSystems[0]} sensors 
                to latest generation for improved reliability.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderRoleSpecificContent = () => {
    switch (role) {
      case 'pilot':
        return renderPilotView();
      case 'technician':
        return renderTechnicianView();
      case 'manager':
        return renderManagerView();
      default:
        return null;
    }
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className={`flex items-center gap-2 ${getRoleColor()}`}>
            {getRoleIcon()}
            AI Advisory - {role.charAt(0).toUpperCase() + role.slice(1)} View
          </CardTitle>
          <Badge className={getSeverityBadgeColor(selectedAnomaly.severity)}>
            {selectedAnomaly.severity.toUpperCase()}
          </Badge>
        </div>
      </CardHeader>
      <CardContent className="flex-1 overflow-hidden">
        <ScrollArea className="h-full pr-4">
          {/* Anomaly Header */}
          <div className="mb-4">
            <h2 className="font-semibold text-lg mb-1">{selectedAnomaly.type.replace(/_/g, ' ').toUpperCase()}</h2>
            <p className="text-sm text-muted-foreground">
              Detected at {formatDateTime(selectedAnomaly.timestamp)}
            </p>
          </div>

          <Separator className="mb-4" />

          {/* Role-specific content */}
          {renderRoleSpecificContent()}

          {/* Common footer information */}
          <div className="mt-6 pt-4 border-t">
            <p className="text-xs text-muted-foreground text-center">
              AI analysis based on current flight data and historical patterns
            </p>
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
